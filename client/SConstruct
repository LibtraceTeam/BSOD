# vim: filetype=python
# $Id$
import glob, os

# -------------------------------------------------------------------------
# User modifyable options:
executable = 'bsod-client'
libs = [ 
    # Image libraries that should be in external/
    'IL', 'ILU', 
    # opengl and opengl utility lib.
    'GL', 'GLU', 
    # lua programming language, should be in external/
    'lua', 
    # libz, used for bung archives
    'z', 
    # SDL networking lib for new networking. You'll need to install this
    'SDL_net',
    # if you want to use stlport
    #'stlport'
]
include_path = [
    '#.',
    '/usr/include/stlport',
    'external/DevIL/include',
    'external/lua/include'
]
lib_path = [ 
    'external/DevIL/lib', 
    'external/lua/lib',
    'external/GL' 
]
src_dirs = [ '.', 'gl', 'linux' ]
cflags = '-Wall -g -Wno-non-template-friend -DLINUX '
libflags = ''

# -------------------------------------------------------------------------
# Programmatic stuff follows:
# We could use env.ParseConfig below but I found it buggy
cflags += os.popen('sdl-config --cflags').read()[:-1]
libflags += os.popen('sdl-config --static-libs').read()[:-1]

sources = []
for i in src_dirs: sources += glob.glob(i + '/*.cpp')

env = Environment(
        CPPPATH = include_path,
        LIBPATH = lib_path,
        CCFLAGS = cflags,
        LIBS = libs,
        LINKFLAGS = libflags
)
output = env.Program(target = executable, source = sources)
env.Clean('clean', output)

# The texture manager requires DevIL headers:
env.Depends('texture_manager.o', 'external/DevIL/lib/libIL.a')
# And lua_script requires lua headers:
env.Depends('lua_script.o', 'external/lua/lib/liblua.a')


# Build DevIL. The action all needs to be executed as a single action
# because the path is not shared between shell invocations.
env.Command('external/DevIL/lib/libIL.a', '',
	[ 'cd external/DevIL/DevIL; ./configure --prefix=`pwd`/.. '\
  	+ '--enable-static=yes; make clean install' ])
env.Command('external/lua/lib/liblua.a', '',
	[ 'cd external/lua; make' ])

# Configure stuff:
# This is cached in options.cache. Delete options.cache for the configure
# stuff to be rerun.
do_conf = 0
try: 
    f = open('options.cache', 'r')
    do_conf = 0
    close(f)
except:
    pass

opt = Options('options.cache', ARGUMENTS)
opt.Add('CPPDEFINES', 'Preprocessor definitions')
#opt['SAM'] = 1

if do_conf:
    conf = env.Configure()
    if not conf.CheckLibWithHeader('stlport_gcc', 'hash_map', 'C++', 
            'std::hash_map< int, int > hmap;', 1):
        conf.env['CPPDEFINES'] = [ 'NO_STLPORT' ]
    else:
	conf.env['LIBS'] += [ 'stlport_gcc' ]

    check_libs = { 
        'lua_open':'lua', 
        'glBegin':'OpenGL',
        'gluBuild2DMipmaps':'OpenGL (GLU)',
        'SDLNet_Init':'SDL_net',
        'ilInit':'DevIL (IL)',
        'iluInit':'DevIL (ILU)',
        'uncompress':'zlib/libz'
    }
    
    if not conf.CheckLib('png', 'png_access_version_number'):
    	print "libpng-dev not installed. PNG support is necessary in the "
	print "image library DevIL. Please install libpng-dev and reinstall "
	print "DevIL as the README describes."
	Exit(1)
    
    for key in check_libs.keys():
        if not conf.CheckLib(None, key):
            print "Critical library '%s' not found!" % (check_libs[key])

    env = conf.Finish()

opt.Update(env)
opt.Save('options.cache', env)

